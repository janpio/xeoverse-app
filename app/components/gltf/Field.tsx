/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 ./public/gltf/field.glb --shadows --output ./app/components/gltf/Field.tsx --types --root ./public/ --debug
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube009: THREE.Mesh
    Cube009_1: THREE.Mesh
    Cube009_2: THREE.Mesh
    Cube009_3: THREE.Mesh
    Cube009_4: THREE.Mesh
  }
  materials: {
    red: THREE.MeshStandardMaterial
    ['dark.green']: THREE.MeshStandardMaterial
    ['dark purple']: THREE.MeshStandardMaterial
    pink: THREE.MeshStandardMaterial
    blue: THREE.MeshStandardMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/gltf/field.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[0, -0.22, 0]} scale={[10, 0.2, 15]}>
        <mesh castShadow receiveShadow geometry={nodes.Cube009.geometry} material={materials.red} />
        <mesh castShadow receiveShadow geometry={nodes.Cube009_1.geometry} material={materials['dark.green']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube009_2.geometry} material={materials['dark purple']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube009_3.geometry} material={materials.pink} />
        <mesh castShadow receiveShadow geometry={nodes.Cube009_4.geometry} material={materials.blue} />
      </group>
    </group>
  )
}

useGLTF.preload('/gltf/field.glb')
